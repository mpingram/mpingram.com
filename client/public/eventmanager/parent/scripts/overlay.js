$(document).ready( function(){



	// commentary
	// ===============================
	
	// commentary configuration
	// -------------------------------------
	var commentaryArray = [
		{
			'element': 'em-event-list',
			'message': 'Under the hood, the app uses a service to sort the events into days and sort the days by start order. <br><br> This is done using the RxJs (Reactive Extensions) library to represent the events as an Observable of GroupedObservables (where each GroupedObservable represents the events of one day). This allows event data to be piped directly from the backend into the Observable that represents that day\'s events.',
			'link': 'https://github.com/mpingram/Eventwindow/blob/master/client/app/shared/event.service.ts',
			'offset': {
				'top': -20,
				'left': 10
			}
		},
		{
			'element': 'em-resource-viewer',
			'message': 'I\'m proud of the scheduler! It works by calculating the height of one hour in pixels using the height of its container, and using that value to calculate the height of each event\'s starting and ending time. <br><br> The scheduler also uses the RxJs library to group the events of the displayed day into GroupedObservables based on their most important resource -- in this case, the room the event will take place in.',
			'link': 'https://github.com/mpingram/Eventwindow/tree/master/client/app/dashboard/resource-viewer',
			'offset': {
				'left': 375
			}
		},
		{
			'element': 'em-resource-scheduler-item:first',
			'message': 'These events are all fake data, randomly generated by a mock backend service. (But if you really want a Duck Teleconference, you can make it happen.)' ,
			'link': 'https://github.com/mpingram/Eventwindow/blob/master/client/app/shared/backend.service.ts',
			'offset': {
				'left': 75
			}
		}
	];


	// helper jquery method
	$.fn.exists = function(){
		return this.length !== 0;
	};

	// commentary creation functions
	// ----------------------------------
	var $overlayCommentaryContainer = $('#overlay-commentary-container');

	function createCommentaryBubble( options ){

		var message = options.message;
		var link = options.link;

		var $elem = $(options.element);
		if ( $elem.exists() === false ){
			throw new Error( 'Element not found: ' + options.element );
		}
		var position = $elem.offset();
		var adjustment = options.offset;

		var location = {
			left: ( position.left + ( adjustment.left || 0 ) ) + 'px',
			top: 	( position.top + ( adjustment.top || 0 ) ) + 'px'
		};

		// commentary bubble creation
		var $commentaryBubbleTemplate = $('<div/>', {
			'class': 'commentary-bubble',

		}).css({ 
			'top': location.top, 
			'left': location.left 
		});


		var $commentaryMessage = $('<div/>', {
			'class': 'commentary-message'
		}).html( message );

		var $commentaryLink = $('<a/>', {
			'class': 'commentary-link',
			target: '_none',
			href: link
		}).text( 'View source code' );

		var $commentaryBubble = $commentaryBubbleTemplate.append( $commentaryMessage, $commentaryLink );

		$overlayCommentaryContainer.append( $commentaryBubble );

	}


	// commentary display functions
	// ------------------------------------
	function showCommentary(){
		$('.commentary-bubble').show();
	}

	function hideCommentary(){
		$('.commentary-bubble').hide();
	}


	
	
	// commentary initialization functions
	// ------------------------------------
	function writeCommentary(){

		for( var i=0; i < commentaryArray.length; i++){
			try {
				createCommentaryBubble( commentaryArray[i] );
			} catch( error ){
				console.warn( error.message );
			}
		}

	}

	function deleteCommentary(){
		$overlayCommentaryContainer.empty();
	}

	function rewriteCommentary(){
		deleteCommentary();
		writeCommentary();
	}


	


	/////////////////////
	// commentary init //
	/////////////////////
	// ----------------------------------- 
	
	// TODO: call after angular initialized somehow
	// or try catch try again?
	setTimeout( function(){
		writeCommentary();
	}, 1000);





	// click handlers
	// ===================================
	var $commentaryToggleButton = $('#commentary-toggle-button');

	$commentaryToggleButton.on( 'click', function(){

		if ( $(this).hasClass( 'on' ) ){
			$(this).removeClass( 'on' ).addClass( 'off' );
			hideCommentary();
		} else {
			$(this).removeClass( 'off' ).addClass( 'on' );
			showCommentary();
		}

	});

	var $returnParentButton = $('#return-parent-button');
	$returnParentButton.on( 'click', function(){
		// ohhh boy
	});
















	// window resize handler
	window.onresize = rewriteCommentary;



});